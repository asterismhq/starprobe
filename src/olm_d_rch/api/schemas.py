"""Pydantic models for API request/response validation."""

from typing import Any, Literal, Optional

from pydantic import BaseModel, Field


class ResearchRequest(BaseModel):
    """Request model for research endpoint."""

    query: str = Field(..., min_length=1, description="Search query to research")
    backend: Optional[Literal["ollama", "mlx"]] = Field(
        default=None,
        description="Preferred LLM backend for this request",
    )


class ResearchResponse(BaseModel):
    """Response model for research endpoint."""

    success: bool = Field(..., description="Whether research completed successfully")
    article: str | None = Field(
        None, description="Fully rendered Markdown article generated by the service"
    )
    metadata: dict[str, Any] | None = Field(
        default=None,
        description="Additional metadata such as sources, counts, or diagnostics",
    )
    error_message: str | None = Field(None, description="Error details if failed")
    diagnostics: list[str] = Field(
        default_factory=list, description="Diagnostics collected during research"
    )
    processing_time: float = Field(
        ..., description="Time taken to process the request in seconds"
    )


class HealthResponse(BaseModel):
    """Response model for health check."""

    status: str = Field(default="ok")
